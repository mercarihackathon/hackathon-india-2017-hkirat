<head>
<script src="https://simplewebrtc.com/latest-v2.js"></script> 
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script src="https://togetherjs.com/togetherjs-min.js"></script>
<link rel="stylesheet" href="http://netdna.bootstrapcdn.com/font-awesome/4.0.3/css/font-awesome.min.css"></link>
<link rel="stylesheet" href="https://codemirror.net/theme/monokai.css"></link>
<link rel="stylesheet" href="https://codemirror.net/theme/base16-light.css"></link>
<link rel="stylesheet" href="http://netdna.bootstrapcdn.com/bootstrap/3.0.3/css/bootstrap.min.css"></link>
<!--- codemirror  -->
<script src="https://codemirror.net/lib/codemirror.js"></script>
<script src="https://codemirror.net/mode/xml/xml.js"></script>
<script src = "https://codemirror.net/mode/clike/clike.js"></script>
<script src="https://codemirror.net/mode/markdown/markdown.js"></script>
<script src="https://codemirror.net/addon/scroll/simplescrollbars.js"></script>
<link rel="stylesheet" href="https://codemirror.net/lib/codemirror.css"></link>
<link rel="stylesheet" href="https://codemirror.net/doc/docs.css"></link>
<link rel="stylesheet" href="https://codemirror.net/addon/scroll/simplescrollbars.css"></link>
<!--- codemirror -->
<style>
	.upper-button {
		border-bottom-left-radius: 0px;
		border-bottom-right-radius: 0px;
	}
	.bottom-button {
		border-top-left-radius: 0px;
		border-top-right-radius: 0px;
	}
	.black-pick:hover {
		background-color: #000;
		border-color: #000;
	}
	.black-pick {
		background-color: #202020;
		border-color: #202020;
	}

	.videoContainer {
	    position: relative;
	    width: 400px;
	    height: 300px;
	}
	.videoContainer video {
	    position: absolute;
	    width: 100%;
	    height: 100%;
	}

.btn1 {
  background: #35739c;
  background-image: -webkit-linear-gradient(top, #35739c, #3f6d8a);
  background-image: -moz-linear-gradient(top, #35739c, #3f6d8a);
  background-image: -ms-linear-gradient(top, #35739c, #3f6d8a);
  background-image: -o-linear-gradient(top, #35739c, #3f6d8a);
  background-image: linear-gradient(to bottom, #35739c, #3f6d8a);
  -webkit-border-radius: 6;
  -moz-border-radius: 6;
  border-radius: 6px;
  font-family: Arial;
  color: #ffffff;
  font-size: 16px;
  padding: 10px 20px 10px 20px;
  text-decoration: none;
}

.btn1:hover {
  background: #3cb0fd;
  background-image: -webkit-linear-gradient(top, #3cb0fd, #3498db);
  background-image: -moz-linear-gradient(top, #3cb0fd, #3498db);
  background-image: -ms-linear-gradient(top, #3cb0fd, #3498db);
  background-image: -o-linear-gradient(top, #3cb0fd, #3498db);
  background-image: linear-gradient(to bottom, #3cb0fd, #3498db);
  text-decoration: none;
}

</style>
</head>
<body style = "background-color:#ecf0f1;">
<div style = "width:48vw;float:left;height:100vh;">
		<div style = "width:100%;float:right;">
			<div class="btn-group btn-group-justified" style="margin-right: auto; width: 100%;"> 
			  <a class="btn btn-info" onclick="maths()">Maths</a>          
			  <a class="btn btn-success" onclick="physics()">Physics</a>
			  <a class="btn btn-warning" onclick="chemistry()">Chemistry</a>
			  <a class="btn btn-danger" onclick="astro()">Astronomy</a>
			  <a class="btn btn-success color-picker black-pick " onclick="com()" style="border-bottom-width: 0px;">Center of Mass</a>
			</div>
			<div id = "vr">
				<iframe src="http://localhost:3000/join/7" style = "width:100%; float:right; height:350px;"></iframe>
			</div>
		</div>
    	<div id = "DrawingArea" style = "float:right; width:100%;"> 
			<div class="btn-group btn-group-justified" style="margin-right: auto; width: 100%;"> 
			  <a class="btn btn-info color-picker upper-button">Blue</a>          
			  <a class="btn btn-success color-picker">Green</a>
			  <a class="btn btn-warning color-picker">Yellow</a>
			  <a class="btn btn-danger color-picker">Red</a>
			  <a class="btn btn-success color-picker black-pick upper-button" style="border-bottom-width: 0px;">Black</a>
			</div>
			<div class="clearfix"></div>
			<div id="sketchContainer" style="width: 100%; height: 400px; border: 1px solid rgba(0,0,0,0.2)"><canvas id="sketch"></canvas></div>
			<div class="btn-group btn-group-justified" style="margin-right: auto; width: 100%;"> 
			  <a class="btn btn-info user-color-pick bottom-button" style="width: 30%;">User Color</a>
			  <a class="btn btn-success plus-size" style="width: 15%;">
			    <i class="fa fa-plus-square"></i>
			  </a>
			  <a class="btn btn-warning clear" style="width: 15%;">
			    <i class="fa fa-times-circle"></i>
			  </a>
			  <a class="btn btn-danger minus-size" style="width: 15%;">
			    <i class="fa fa-minus-square"></i>
			  </a>
			  <a class="btn btn-default eraser bottom-button" style="width: 35%; border-top-width: 0px;">
			    <i class="fa fa-eraser"></i>
			  </a>
			</div>
	    </div>
    </div>
	<div style = "width:50vw;float:right; height: 100vh;">
		<div style="width:100%;height:300px;">
		<center>
			<div id="remotes" style = "width:400px;height:300px;float:left;"></div><br>
		</center>
		</div>
		<div style = "margin:20px;">
			<div style = "width:49vw;height:350px;float:right;">
				<div class="btn-group btn-group-justified" style="margin-right: auto; width: 100%;"> 
				  <a class="btn btn-info color-picker upper-button" onclick = "changeLangToDoc()">Document</a>          
				  <a class="btn btn-success color-picker" onclick = "changeLangToC()">Code</a>
				  <a class="btn btn-warning color-picker" onclick = "changeLangToHTML()">Web Development</a>
				</div>
				<div id = "brack">
				<textarea id="code" name="code" style="display: none; width:49vw; float:left;">
Lecture On Laws of Motion
The motion of an aircraft through the air can be
explained and described by physical principals discovered over 300 years ago by Sir Isaac Newton. Newton worked in many areas of mathematics and physics. He developed the theories of gravitation in 1666, when he was only 23 years old.
				</textarea>
				</div>
			</div>
		</div>
		<center>
			<button id="rzp-button1" class="btn1">Pay</button>
			<button class="btn1" onclick="TogetherJS(this); return false;">Start Session</button>
		</center>
	</div>


	<script>
		var options = {
		    "key": "rzp_test_xJcPCWUmnAjEtg",
		    "amount": "20000", // 2000 paise = INR 20
		    "name": "Tutor Harkirat",
		    "description": "testing",
		    "image": "/images/logo.png",
		    "handler": function (response) {
		    	var data = {};
				for(var i = 0; i<fields.length; i++) {
					data[fields[i]] = document.getElementById(fields[i]).value;
				}
		    	$.ajax({
				  type: "POST",
				  url: "/payment",
		    	  data: {transaction_id: response.razorpay_payment_id, form_id: 1, data: JSON.stringify(data)},
		    	  success: function(body) {
		    	  	alert("Payment Successful");
		    	  }
		    	});
		    },
		    "prefill": {
		        "name": "Harkirat",
		        "email": "hsk@gmail.com"
		    },
		    "notes": {
		        "address": "Hello World"
		    },
		    "theme": {
		        "color": "#F37254"
		    }
		};
		var rzp1 = new Razorpay(options);

		document.getElementById('rzp-button1').onclick = function(e){
			console.log("payment");
		    rzp1.open();
		    e.preventDefault();
		}
	</script>

	<script>
		var webrtc = new SimpleWebRTC({
		  // the id/element dom element that will hold "our" video
		  localVideoEl: 'localVideo',
		  // the id/element dom element that will hold remote videos
		  remoteVideosEl: '',
		  // immediately ask for camera access
		  autoRequestMedia: true
		});

		webrtc.on('videoAdded', function (video, peer) {
		    console.log('video added', peer);
		    var remotes = document.getElementById('remotes');
		    if (remotes) {
		        var container = document.createElement('div');
		        container.className = 'videoContainer';
		        container.id = 'container_' + webrtc.getDomId(peer);
		        container.appendChild(video);

		        // suppress contextmenu
		        video.oncontextmenu = function () { return false; };

		        remotes.appendChild(container);
		    }
		});

		webrtc.on('videoRemoved', function (video, peer) {
		    console.log('video removed ', peer);
		    var remotes = document.getElementById('remotes');
		    var el = document.getElementById(peer ? 'container_' + webrtc.getDomId(peer) : 'localScreenContainer');
		    if (remotes && el) {
		        remotes.removeChild(el);
		    }
		});

		webrtc.on('readyToCall', function () {
		  webrtc.joinRoom('hiThere');
		});

	</script>
    <!--<video height="50" id="localVideo"></video>-->
    
<script>
	// get the canvas element and its context
	var canvas = document.getElementById('sketch');
	var context = canvas.getContext('2d');

	// the aspect ratio is always based on 1140x400, height is calculated from width:
	canvas.width = $('#sketchContainer').outerWidth();
	canvas.height = (canvas.width/1140)*400;
	$('#sketchContainer').outerHeight(String(canvas.height) + "px", true);
	// scale function needs to know the width/height pre-resizing:
	var oWidth = canvas.width;
	var oHeight = canvas.height;
	var lines = [];

	var lastMouse = {
	  x: 0,
	  y: 0
	};

	// brush settings
	context.lineWidth = 2;
	context.lineJoin = 'round';
	context.lineCap = 'round';
	context.strokeStyle = '#000';

	// attach the mousedown, mouseout, mousemove, mouseup event listeners.
	canvas.addEventListener('mousedown', function (e) {
	  lastMouse = {
	    x: e.pageX - this.offsetLeft,
	    y: e.pageY - this.offsetTop
	  };
	  canvas.addEventListener('mousemove', move, false);
	}, false);

	canvas.addEventListener('mouseout', function () {
	  canvas.removeEventListener('mousemove', move, false);
	}, false);

	canvas.addEventListener('mouseup', function () {
	  canvas.removeEventListener('mousemove', move, false);
	}, false);

	// Sets the brush size:
	function setSize(size) {
	  context.lineWidth = size;
	}

	// Sets the brush color:
	function setColor(color) {
	  context.globalCompositeOperation = 'source-over';
	  context.strokeStyle = color;
	}

	// Sets the brush to erase-mode:
	function eraser() {
	  context.globalCompositeOperation = 'destination-out';
	  context.strokeStyle = 'rgba(0,0,0,1)';
	}

	// Clears the canvas and the lines-array:
	function clear(send) {
	  context.clearRect(0, 0, canvas.width, canvas.height);
	  lines = [];
	  if (send && TogetherJS.running) {
	    TogetherJS.send({
	      type: 'clear'
	    });
	  }
	}

	// Redraws the lines from the lines-array:
	function reDraw(lines){
	  for (var i in lines) {
	    draw(lines[i][0], lines[i][1], lines[i][2], lines[i][3], lines[i][4], false);
	  }
	}
	// Draws the lines, called by move and the TogetherJS event listener:
	function draw(start, end, color, size, compositeOperation, save) {
	  context.save();
	  context.lineJoin = 'round'; 
	  context.lineCap = 'round';
	  // Since the coordinates have been translated to an 1140x400 canvas, the context needs to be scaled before it can be drawn on:
	  context.scale(canvas.width/1140,canvas.height/400);
	  context.strokeStyle = color;
	  context.globalCompositeOperation = compositeOperation;
	  context.lineWidth = size;
	  context.beginPath();
	  context.moveTo(start.x, start.y);
	  context.lineTo(end.x, end.y);
	  context.closePath();
	  context.stroke();
	  context.restore();
	  if (save) {
	    // Won't save if draw() is called from reDraw().
	    lines.push([{x: start.x, y: start.y}, {x: end.x, y: end.y}, color, size, compositeOperation]);
	  }
	}

	// Called whenever the mousemove event is fired, calls the draw function:
	function move(e) {
	  var mouse = {
	    x: e.pageX - this.offsetLeft,
	    y: e.pageY - this.offsetTop
	  };
	  // Translates the coordinates from the local canvas size to 1140x400:
	  sendMouse = {
	    x: (1140/canvas.width)*mouse.x,
	    y: (400/canvas.height)*mouse.y
	  };
	  sendLastMouse = {
	    x: (1140/canvas.width)*lastMouse.x,
	    y: (400/canvas.height)*lastMouse.y
	  };
	  draw(sendLastMouse, sendMouse, context.strokeStyle, context.lineWidth, context.globalCompositeOperation, true);
	  if (TogetherJS.running) {
	    TogetherJS.send({
	      type: 'draw',
	      start: sendLastMouse,
	      end: sendMouse,
	      color: context.strokeStyle,
	      size: context.lineWidth,
	      compositeOperation: context.globalCompositeOperation
	    });
	  }
	  lastMouse = mouse;
	}

	// Listens for draw messages, sends info about the drawn lines:
	TogetherJS.hub.on('draw', function (msg) {
	  if (!msg.sameUrl) {
	      return;
	  }
	  draw(msg.start, msg.end, msg.color, msg.size, msg.compositeOperation, true);
	});


	// Clears the canvas whenever someone presses the clear-button
	TogetherJS.hub.on('clear', function (msg) {
	  if (!msg.sameUrl) {
	    return;
	  }
	  clear(false);
	});

	// Hello is sent from every newly connected user, this way they will receive what has already been drawn:
	TogetherJS.hub.on('togetherjs.hello', function () {
	  TogetherJS.send({
	    type: 'init',
	    lines: lines
	  });
	});

	// Draw initially received drawings:
	TogetherJS.hub.on('init', function (msg) {
	  reDraw(msg.lines);
	  lines = msg.lines;
	});

	// JQuery to handle buttons and resizing events, also changes the cursor to a dot resembling the brush size:
	$(document).ready(function () {
	  // changeMouse creates a temporary invisible canvas that shows the cursor, which is then set as the cursor through css:
	  function changeMouse() {
	    // Makes sure the cursorSize is scaled:
	    var cursorSize = context.lineWidth*(canvas.width/1140); 
	    if (cursorSize < 10){
	        cursorSize = 10;
	    }
	    var cursorColor = context.strokeStyle;
	    var cursorGenerator = document.createElement('canvas');
	    cursorGenerator.width = cursorSize;
	    cursorGenerator.height = cursorSize;
	    var ctx = cursorGenerator.getContext('2d');

	    var centerX = cursorGenerator.width/2;
	    var centerY = cursorGenerator.height/2;

	    ctx.beginPath();
	    ctx.arc(centerX, centerY, (cursorSize/2)-4, 0, 2 * Math.PI, false);
	    ctx.lineWidth = 3;
	    ctx.strokeStyle = cursorColor;
	    ctx.stroke();
	    $('#sketch').css('cursor', 'url(' + cursorGenerator.toDataURL('image/png') + ') ' + cursorSize/2 + ' ' + cursorSize/2 + ',crosshair');
	  }
	  // Init mouse
	  changeMouse();

	  // Redraws the lines whenever the canvas is resized:
	  $(window).resize(function() {
	    if ($('#sketchContainer').width() != oWidth) {
	      canvas.width = $('#sketchContainer').width();
	      canvas.height = (canvas.width/1140)*400;
	      $('#sketchContainer').outerHeight(String(canvas.height)+"px", true);
	      var ratio = canvas.width/oWidth;
	      oWidth = canvas.width;
	      oHeight = canvas.height;
	      reDraw(lines);
	      changeMouse();
	    }
	  });

	  // Clears the canvas:
	  $('.clear').click(function () {
	    clear(true);
	  });

	  // Color-button functions:
	  $('.color-picker').click(function () {
	    var $this = $(this);
	    console.log($this);
	    setColor($this.css("background-color"));
	    changeMouse();
	  });

	  $('.eraser').click(function () {
	    eraser();
	    changeMouse();
	  });
	  // TogetherJS user color:
	  $('.user-color-pick').click(function() {
	    setColor(TogetherJS.require('peers').Self.color);
	    changeMouse();
	  });

	  // Increase/decrease brush size:
	  $('.plus-size').click(function() {
	    setSize(context.lineWidth+3);
	    changeMouse();
	  });

	  $('.minus-size').click(function() {
	    if (context.lineWidth > 3) {
	      setSize(context.lineWidth-3);
	    }
	    changeMouse();
	  });          
	});

</script>
	<script>
	    var editor = CodeMirror.fromTextArea(document.getElementById("code"), {
	      lineNumbers: true,
	      scrollbarStyle: "simple"
	    });
	</script>
	<script type="text/javascript">
		function changeLangToC() {
			console.log("bi");
			editor.setOption("mode", "text/x-csrc");
			editor.setOption("theme", "monokai");
			editor.setValue("#include <stdc++.h>\nint main() {\n\tprintf(\"hello world\"); \n\treturn 0;\n}");
		}

		function maths() {
			$.get( "/maths", function( data ) {});
			document.getElementById("vr").innerHTML = '<iframe src="http://localhost:3000/join/3" style = "width:100%; float:right; height:350px;"></iframe>';
		}
		function physics() {
			$.get( "/physics", function( data ) {
				console.log(data);
			});
			document.getElementById("vr").innerHTML = '<iframe src="http://localhost:3000/join/7" style = "width:100%; float:right; height:350px;"></iframe>';
		}
		function chemistry() {
			$.get( "/chemistry", function( data ) {});
			document.getElementById("vr").innerHTML = '<iframe src="http://localhost:3000/join/5" style = "width:100%; float:right; height:350px;"></iframe>';
		}

		function astro() {
			$.get( "/astro", function( data ) {
			console.log(data);
			});
			document.getElementById("vr").innerHTML = '<iframe src="http://localhost:3000/join/8" style = "width:100%; float:right; height:350px;"></iframe>';			
		}
		
		function com() {
			$.get( "/com", function( data ) {
				console.log(data);
			});
			document.getElementById("vr").innerHTML = '<iframe src="http://localhost:3000/join/2" style = "width:100%; float:right; height:350px;"></iframe>';
		}
		function changeLangToDoc() {
			editor.setOption("mode", "text");
			editor.setOption("theme", "base16-light");
			editor.setValue("Netwons Law of Motion\n");	
		}

		function changeLangToHTML() {
			editor.setOption("mode", "text");
			editor.setOption("theme", "monokai");
			editor.setValue("<html>\n<head> </head>\n</html>");	
			document.getElementById("brack").innerHTML = '<iframe src="http://localhost:8000/src/hosted.html" style = "width:100%; float:right; height:300px;"></iframe>'
		}

	</script>
</body>